---
// 2D Ocean Experience with Scroll-Driven Animations
import BeachHeader from '../components/hero/BeachHeader.astro'
import { Ocean2DCanvas } from '../components/ocean/Ocean2DCanvas.tsx'
import { DolphinLayer } from '../components/ocean/DolphinLayer.tsx'
import { DeepSharkScene } from '../components/deep/DeepSharkScene.tsx'
import { OceanHud } from '../components/ui/OceanHud.tsx'
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<title>Fresh Jelly - Ocean Paradise</title>
		<meta name="description" content="Dive into a beautiful 2D ocean experience with dynamic sea life that grows as you explore deeper" />
		
		<!-- Open Graph -->
		<meta property="og:title" content="Fresh Jelly - Ocean Paradise" />
		<meta property="og:description" content="Experience a stunning 2D ocean with scroll-driven animations" />
		<meta property="og:type" content="website" />
		<meta property="og:url" content="https://freshjelly.com" />
		
		<!-- Font Preload -->
		<link rel="preload" href="/fonts/inter-400.woff2" as="font" type="font/woff2" crossorigin />
		<link rel="preload" href="/fonts/inter-700.woff2" as="font" type="font/woff2" crossorigin />
		
		<!-- Critical CSS -->
		<style>
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 400;
				font-display: swap;
				src: url('/fonts/inter-400.woff2') format('woff2');
			}
			
			@font-face {
				font-family: 'Inter';
				font-style: normal;
				font-weight: 700;
				font-display: swap;
				src: url('/fonts/inter-700.woff2') format('woff2');
			}
			
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}
			
			html {
				scroll-behavior: smooth;
			}
			
			body {
				font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
				overflow-x: hidden;
				background: #000;
				line-height: 1.6;
			}
			
			main {
				position: relative;
			}
			
			/* Sections */
			.section {
				position: relative;
				width: 100%;
			}
			
			#beach-hero {
				height: 100vh;
				z-index: 3;
			}
			
			#ocean {
				height: 200vh; /* Extended for scroll effect */
				z-index: 2;
				background: linear-gradient(
					to bottom,
					#87CEEB 0%,
					#4682B4 30%,
					#191970 60%,
					#000080 100%
				);
			}
			
			#deep-sea {
				min-height: 100vh;
				z-index: 1;
				background: linear-gradient(
					to bottom,
					#000080 0%,
					#191970 30%,
					#0c0c2d 70%,
					#000 100%
				);
			}
			
			/* Ocean canvas positioning */
			.ocean-section {
				position: relative;
				width: 100%;
				height: 100%;
			}
			
			/* Loading states */
			.loading-overlay {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: rgba(0, 0, 0, 0.8);
				display: flex;
				align-items: center;
				justify-content: center;
				color: white;
				font-size: 1.2rem;
				z-index: 10;
				opacity: 0;
				pointer-events: none;
				transition: opacity 0.3s ease;
			}
			
			.loading-overlay.visible {
				opacity: 1;
				pointer-events: auto;
			}
			
			/* Performance optimizations */
			.will-change-transform {
				will-change: transform;
			}
			
			.will-change-scroll {
				will-change: scroll-position;
			}
			
			/* Accessibility */
			.sr-only {
				position: absolute;
				width: 1px;
				height: 1px;
				padding: 0;
				margin: -1px;
				overflow: hidden;
				clip: rect(0, 0, 0, 0);
				white-space: nowrap;
				border: 0;
			}
			
			/* Reduced motion support */
			@media (prefers-reduced-motion: reduce) {
				html {
					scroll-behavior: auto;
				}
				
				* {
					animation-duration: 0.01ms !important;
					animation-iteration-count: 1 !important;
					transition-duration: 0.01ms !important;
				}
			}
			
			/* Mobile optimizations */
			@media (max-width: 768px) {
				#ocean {
					height: 150vh;
				}
			}
			
			/* High contrast mode */
			@media (prefers-contrast: high) {
				#ocean {
					background: linear-gradient(
						to bottom,
						#000080 0%,
						#000040 50%,
						#000020 100%
					);
				}
			}
		</style>
		
		<!-- Import animations CSS -->
		<link rel="stylesheet" href="../styles/animations.css" />
	</head>
	<body>
		<main class="will-change-scroll">
			<!-- Skip to content for accessibility -->
			<a href="#ocean" class="sr-only">Skip to ocean content</a>
			
			<!-- Beach Hero Section -->
			<section id="beach-hero" class="section">
				<BeachHeader />
			</section>
			
			<!-- Ocean Section with 2D Canvas -->
			<section id="ocean" class="section ocean-section">
				<div class="loading-overlay">
					<div>
						<div style="font-size: 2rem; margin-bottom: 1rem;">ðŸŒŠ</div>
						<div>Loading Ocean Environment...</div>
					</div>
				</div>
				
				<!-- Main 2D Ocean Canvas -->
				<Ocean2DCanvas client:visible />
				
				<!-- Dolphin Layer Overlay -->
				<DolphinLayer client:visible />
				
				<!-- Section label for screen readers -->
				<div class="sr-only">
					<h2>Interactive Ocean Environment</h2>
					<p>Scroll to see more sea life appear in the ocean</p>
				</div>
			</section>
			
			<!-- Deep Sea Section with 3D Sharks -->
			<section id="deep-sea" class="section">
				<div class="sr-only">
					<h2>Deep Sea Environment</h2>
					<p>The depths of the ocean with patrolling sharks</p>
				</div>
				
				<DeepSharkScene client:visible />
			</section>
			
			<!-- Ocean HUD Controls -->
			<OceanHud client:visible />
		</main>
		
		<!-- Initialize scroll animations -->
		<script>
			// Simple initialization without imports for now
			document.addEventListener('DOMContentLoaded', () => {
				console.log('Ocean site initialized');
				
				// Performance monitoring
				let observer;
				if ('IntersectionObserver' in window) {
					observer = new IntersectionObserver((entries) => {
						entries.forEach(entry => {
							const loading = entry.target.querySelector('.loading-overlay');
							if (loading) {
								if (entry.isIntersecting) {
									loading.classList.remove('visible');
								}
							}
						});
					}, { threshold: 0.1 });
					
					document.querySelectorAll('.section').forEach(section => {
						observer.observe(section);
					});
				}
				
				// Cleanup on page unload
				window.addEventListener('beforeunload', () => {
					if (observer) {
						observer.disconnect();
					}
				});
			});
		</script>
	</body>
</html>
